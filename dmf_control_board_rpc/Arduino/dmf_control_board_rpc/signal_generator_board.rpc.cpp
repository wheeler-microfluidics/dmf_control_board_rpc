/* Automatically generated nanopb constant definitions */
/* Generated by nanopb-0.2.8-dev at Wed Jun  4 09:20:26 2014. */

#include "signal_generator_board.rpc.h"



const pb_field_t SignalGeneratorForwardI2cRequestRequest_fields[3] = {
    PB_FIELD2(  1, UINT32  , REQUIRED, STATIC  , FIRST, SignalGeneratorForwardI2cRequestRequest, address, address, 0),
    PB_FIELD2(  2, BYTES   , REQUIRED, CALLBACK, OTHER, SignalGeneratorForwardI2cRequestRequest, request, address, 0),
    PB_LAST_FIELD
};

const pb_field_t SignalGeneratorRamFreeRequest_fields[1] = {
    PB_LAST_FIELD
};

const pb_field_t SignalGeneratorPotRequest_fields[2] = {
    PB_FIELD2(  1, UINT32  , REQUIRED, STATIC  , FIRST, SignalGeneratorPotRequest, index, index, 0),
    PB_LAST_FIELD
};

const pb_field_t SignalGeneratorWaveformFrequencyRequest_fields[1] = {
    PB_LAST_FIELD
};

const pb_field_t SignalGeneratorWaveformVoltageRequest_fields[1] = {
    PB_LAST_FIELD
};

const pb_field_t SignalGeneratorI2cAddressRequest_fields[1] = {
    PB_LAST_FIELD
};

const pb_field_t SignalGeneratorSetPotRequest_fields[4] = {
    PB_FIELD2(  1, UINT32  , REQUIRED, STATIC  , FIRST, SignalGeneratorSetPotRequest, address, address, 0),
    PB_FIELD2(  2, UINT32  , REQUIRED, STATIC  , OTHER, SignalGeneratorSetPotRequest, level, address, 0),
    PB_FIELD2(  3, BOOL    , REQUIRED, STATIC  , OTHER, SignalGeneratorSetPotRequest, save_to_eeprom, level, 0),
    PB_LAST_FIELD
};

const pb_field_t SignalGeneratorSetWaveformFrequencyRequest_fields[2] = {
    PB_FIELD2(  1, FLOAT   , REQUIRED, STATIC  , FIRST, SignalGeneratorSetWaveformFrequencyRequest, frequency, frequency, 0),
    PB_LAST_FIELD
};

const pb_field_t SignalGeneratorSetWaveformVoltageRequest_fields[2] = {
    PB_FIELD2(  1, FLOAT   , REQUIRED, STATIC  , FIRST, SignalGeneratorSetWaveformVoltageRequest, vrms, vrms, 0),
    PB_LAST_FIELD
};

const pb_field_t SignalGeneratorSetI2cAddressRequest_fields[2] = {
    PB_FIELD2(  1, UINT32  , REQUIRED, STATIC  , FIRST, SignalGeneratorSetI2cAddressRequest, address, address, 0),
    PB_LAST_FIELD
};

const pb_field_t SignalGeneratorSetHfAmplitudeCorrectionRequest_fields[2] = {
    PB_FIELD2(  1, FLOAT   , REQUIRED, STATIC  , FIRST, SignalGeneratorSetHfAmplitudeCorrectionRequest, correction, correction, 0),
    PB_LAST_FIELD
};

const pb_field_t SignalGeneratorVoutPkPkRequest_fields[1] = {
    PB_LAST_FIELD
};

const pb_field_t SignalGeneratorLoadConfigRequest_fields[2] = {
    PB_FIELD2(  1, BOOL    , REQUIRED, STATIC  , FIRST, SignalGeneratorLoadConfigRequest, use_defaults, use_defaults, 0),
    PB_LAST_FIELD
};

const pb_field_t SignalGeneratorConfigVersionRequest_fields[2] = {
    PB_FIELD2(  1, UINT32  , REQUIRED, STATIC  , FIRST, SignalGeneratorConfigVersionRequest, position, position, 0),
    PB_LAST_FIELD
};

const pb_field_t SignalGeneratorForwardI2cRequestResponse_fields[2] = {
    PB_FIELD2(  1, SINT32  , REQUIRED, STATIC  , FIRST, SignalGeneratorForwardI2cRequestResponse, result, result, 0),
    PB_LAST_FIELD
};

const pb_field_t SignalGeneratorRamFreeResponse_fields[2] = {
    PB_FIELD2(  1, UINT32  , REQUIRED, STATIC  , FIRST, SignalGeneratorRamFreeResponse, result, result, 0),
    PB_LAST_FIELD
};

const pb_field_t SignalGeneratorPotResponse_fields[2] = {
    PB_FIELD2(  1, UINT32  , REQUIRED, STATIC  , FIRST, SignalGeneratorPotResponse, result, result, 0),
    PB_LAST_FIELD
};

const pb_field_t SignalGeneratorWaveformFrequencyResponse_fields[2] = {
    PB_FIELD2(  1, FLOAT   , REQUIRED, STATIC  , FIRST, SignalGeneratorWaveformFrequencyResponse, result, result, 0),
    PB_LAST_FIELD
};

const pb_field_t SignalGeneratorWaveformVoltageResponse_fields[2] = {
    PB_FIELD2(  1, FLOAT   , REQUIRED, STATIC  , FIRST, SignalGeneratorWaveformVoltageResponse, result, result, 0),
    PB_LAST_FIELD
};

const pb_field_t SignalGeneratorI2cAddressResponse_fields[2] = {
    PB_FIELD2(  1, UINT32  , REQUIRED, STATIC  , FIRST, SignalGeneratorI2cAddressResponse, result, result, 0),
    PB_LAST_FIELD
};

const pb_field_t SignalGeneratorSetPotResponse_fields[1] = {
    PB_LAST_FIELD
};

const pb_field_t SignalGeneratorSetWaveformFrequencyResponse_fields[2] = {
    PB_FIELD2(  1, FLOAT   , REQUIRED, STATIC  , FIRST, SignalGeneratorSetWaveformFrequencyResponse, result, result, 0),
    PB_LAST_FIELD
};

const pb_field_t SignalGeneratorSetWaveformVoltageResponse_fields[2] = {
    PB_FIELD2(  1, FLOAT   , REQUIRED, STATIC  , FIRST, SignalGeneratorSetWaveformVoltageResponse, result, result, 0),
    PB_LAST_FIELD
};

const pb_field_t SignalGeneratorSetI2cAddressResponse_fields[1] = {
    PB_LAST_FIELD
};

const pb_field_t SignalGeneratorSetHfAmplitudeCorrectionResponse_fields[1] = {
    PB_LAST_FIELD
};

const pb_field_t SignalGeneratorVoutPkPkResponse_fields[2] = {
    PB_FIELD2(  1, FLOAT   , REQUIRED, STATIC  , FIRST, SignalGeneratorVoutPkPkResponse, result, result, 0),
    PB_LAST_FIELD
};

const pb_field_t SignalGeneratorLoadConfigResponse_fields[1] = {
    PB_LAST_FIELD
};

const pb_field_t SignalGeneratorConfigVersionResponse_fields[2] = {
    PB_FIELD2(  1, UINT32  , REQUIRED, STATIC  , FIRST, SignalGeneratorConfigVersionResponse, result, result, 0),
    PB_LAST_FIELD
};

const pb_field_t SignalGeneratorCommandRequest_fields[15] = {
    PB_FIELD2(  1, MESSAGE , OPTIONAL, STATIC  , FIRST, SignalGeneratorCommandRequest, forward_i2c_request, forward_i2c_request, &SignalGeneratorForwardI2cRequestRequest_fields),
    PB_FIELD2( 10, MESSAGE , OPTIONAL, STATIC  , OTHER, SignalGeneratorCommandRequest, ram_free, forward_i2c_request, &SignalGeneratorRamFreeRequest_fields),
    PB_FIELD2( 11, MESSAGE , OPTIONAL, STATIC  , OTHER, SignalGeneratorCommandRequest, pot, ram_free, &SignalGeneratorPotRequest_fields),
    PB_FIELD2( 12, MESSAGE , OPTIONAL, STATIC  , OTHER, SignalGeneratorCommandRequest, waveform_frequency, pot, &SignalGeneratorWaveformFrequencyRequest_fields),
    PB_FIELD2( 13, MESSAGE , OPTIONAL, STATIC  , OTHER, SignalGeneratorCommandRequest, waveform_voltage, waveform_frequency, &SignalGeneratorWaveformVoltageRequest_fields),
    PB_FIELD2( 14, MESSAGE , OPTIONAL, STATIC  , OTHER, SignalGeneratorCommandRequest, i2c_address, waveform_voltage, &SignalGeneratorI2cAddressRequest_fields),
    PB_FIELD2( 15, MESSAGE , OPTIONAL, STATIC  , OTHER, SignalGeneratorCommandRequest, set_pot, i2c_address, &SignalGeneratorSetPotRequest_fields),
    PB_FIELD2( 16, MESSAGE , OPTIONAL, STATIC  , OTHER, SignalGeneratorCommandRequest, set_waveform_frequency, set_pot, &SignalGeneratorSetWaveformFrequencyRequest_fields),
    PB_FIELD2( 17, MESSAGE , OPTIONAL, STATIC  , OTHER, SignalGeneratorCommandRequest, set_waveform_voltage, set_waveform_frequency, &SignalGeneratorSetWaveformVoltageRequest_fields),
    PB_FIELD2( 18, MESSAGE , OPTIONAL, STATIC  , OTHER, SignalGeneratorCommandRequest, set_i2c_address, set_waveform_voltage, &SignalGeneratorSetI2cAddressRequest_fields),
    PB_FIELD2( 19, MESSAGE , OPTIONAL, STATIC  , OTHER, SignalGeneratorCommandRequest, set_hf_amplitude_correction, set_i2c_address, &SignalGeneratorSetHfAmplitudeCorrectionRequest_fields),
    PB_FIELD2( 20, MESSAGE , OPTIONAL, STATIC  , OTHER, SignalGeneratorCommandRequest, vout_pk_pk, set_hf_amplitude_correction, &SignalGeneratorVoutPkPkRequest_fields),
    PB_FIELD2( 21, MESSAGE , OPTIONAL, STATIC  , OTHER, SignalGeneratorCommandRequest, load_config, vout_pk_pk, &SignalGeneratorLoadConfigRequest_fields),
    PB_FIELD2( 22, MESSAGE , OPTIONAL, STATIC  , OTHER, SignalGeneratorCommandRequest, config_version, load_config, &SignalGeneratorConfigVersionRequest_fields),
    PB_LAST_FIELD
};

const pb_field_t SignalGeneratorCommandResponse_fields[15] = {
    PB_FIELD2(  1, MESSAGE , OPTIONAL, STATIC  , FIRST, SignalGeneratorCommandResponse, forward_i2c_request, forward_i2c_request, &SignalGeneratorForwardI2cRequestResponse_fields),
    PB_FIELD2( 10, MESSAGE , OPTIONAL, STATIC  , OTHER, SignalGeneratorCommandResponse, ram_free, forward_i2c_request, &SignalGeneratorRamFreeResponse_fields),
    PB_FIELD2( 11, MESSAGE , OPTIONAL, STATIC  , OTHER, SignalGeneratorCommandResponse, pot, ram_free, &SignalGeneratorPotResponse_fields),
    PB_FIELD2( 12, MESSAGE , OPTIONAL, STATIC  , OTHER, SignalGeneratorCommandResponse, waveform_frequency, pot, &SignalGeneratorWaveformFrequencyResponse_fields),
    PB_FIELD2( 13, MESSAGE , OPTIONAL, STATIC  , OTHER, SignalGeneratorCommandResponse, waveform_voltage, waveform_frequency, &SignalGeneratorWaveformVoltageResponse_fields),
    PB_FIELD2( 14, MESSAGE , OPTIONAL, STATIC  , OTHER, SignalGeneratorCommandResponse, i2c_address, waveform_voltage, &SignalGeneratorI2cAddressResponse_fields),
    PB_FIELD2( 15, MESSAGE , OPTIONAL, STATIC  , OTHER, SignalGeneratorCommandResponse, set_pot, i2c_address, &SignalGeneratorSetPotResponse_fields),
    PB_FIELD2( 16, MESSAGE , OPTIONAL, STATIC  , OTHER, SignalGeneratorCommandResponse, set_waveform_frequency, set_pot, &SignalGeneratorSetWaveformFrequencyResponse_fields),
    PB_FIELD2( 17, MESSAGE , OPTIONAL, STATIC  , OTHER, SignalGeneratorCommandResponse, set_waveform_voltage, set_waveform_frequency, &SignalGeneratorSetWaveformVoltageResponse_fields),
    PB_FIELD2( 18, MESSAGE , OPTIONAL, STATIC  , OTHER, SignalGeneratorCommandResponse, set_i2c_address, set_waveform_voltage, &SignalGeneratorSetI2cAddressResponse_fields),
    PB_FIELD2( 19, MESSAGE , OPTIONAL, STATIC  , OTHER, SignalGeneratorCommandResponse, set_hf_amplitude_correction, set_i2c_address, &SignalGeneratorSetHfAmplitudeCorrectionResponse_fields),
    PB_FIELD2( 20, MESSAGE , OPTIONAL, STATIC  , OTHER, SignalGeneratorCommandResponse, vout_pk_pk, set_hf_amplitude_correction, &SignalGeneratorVoutPkPkResponse_fields),
    PB_FIELD2( 21, MESSAGE , OPTIONAL, STATIC  , OTHER, SignalGeneratorCommandResponse, load_config, vout_pk_pk, &SignalGeneratorLoadConfigResponse_fields),
    PB_FIELD2( 22, MESSAGE , OPTIONAL, STATIC  , OTHER, SignalGeneratorCommandResponse, config_version, load_config, &SignalGeneratorConfigVersionResponse_fields),
    PB_LAST_FIELD
};


/* Check that field information fits in pb_field_t */
#if !defined(PB_FIELD_32BIT)
/* If you get an error here, it means that you need to define PB_FIELD_32BIT
 * compile-time option. You can do that in pb.h or on compiler command line.
 *
 * The reason you need to do this is that some of your messages contain tag
 * numbers or field sizes that are larger than what can fit in 8 or 16 bit
 * field descriptors.
 */
STATIC_ASSERT((pb_membersize(SignalGeneratorCommandRequest, forward_i2c_request) < 65536 && pb_membersize(SignalGeneratorCommandRequest, ram_free) < 65536 && pb_membersize(SignalGeneratorCommandRequest, pot) < 65536 && pb_membersize(SignalGeneratorCommandRequest, waveform_frequency) < 65536 && pb_membersize(SignalGeneratorCommandRequest, waveform_voltage) < 65536 && pb_membersize(SignalGeneratorCommandRequest, i2c_address) < 65536 && pb_membersize(SignalGeneratorCommandRequest, set_pot) < 65536 && pb_membersize(SignalGeneratorCommandRequest, set_waveform_frequency) < 65536 && pb_membersize(SignalGeneratorCommandRequest, set_waveform_voltage) < 65536 && pb_membersize(SignalGeneratorCommandRequest, set_i2c_address) < 65536 && pb_membersize(SignalGeneratorCommandRequest, set_hf_amplitude_correction) < 65536 && pb_membersize(SignalGeneratorCommandRequest, vout_pk_pk) < 65536 && pb_membersize(SignalGeneratorCommandRequest, load_config) < 65536 && pb_membersize(SignalGeneratorCommandRequest, config_version) < 65536 && pb_membersize(SignalGeneratorCommandResponse, forward_i2c_request) < 65536 && pb_membersize(SignalGeneratorCommandResponse, ram_free) < 65536 && pb_membersize(SignalGeneratorCommandResponse, pot) < 65536 && pb_membersize(SignalGeneratorCommandResponse, waveform_frequency) < 65536 && pb_membersize(SignalGeneratorCommandResponse, waveform_voltage) < 65536 && pb_membersize(SignalGeneratorCommandResponse, i2c_address) < 65536 && pb_membersize(SignalGeneratorCommandResponse, set_pot) < 65536 && pb_membersize(SignalGeneratorCommandResponse, set_waveform_frequency) < 65536 && pb_membersize(SignalGeneratorCommandResponse, set_waveform_voltage) < 65536 && pb_membersize(SignalGeneratorCommandResponse, set_i2c_address) < 65536 && pb_membersize(SignalGeneratorCommandResponse, set_hf_amplitude_correction) < 65536 && pb_membersize(SignalGeneratorCommandResponse, vout_pk_pk) < 65536 && pb_membersize(SignalGeneratorCommandResponse, load_config) < 65536 && pb_membersize(SignalGeneratorCommandResponse, config_version) < 65536), YOU_MUST_DEFINE_PB_FIELD_32BIT_FOR_MESSAGES_SignalGeneratorForwardI2cRequestRequest_SignalGeneratorRamFreeRequest_SignalGeneratorPotRequest_SignalGeneratorWaveformFrequencyRequest_SignalGeneratorWaveformVoltageRequest_SignalGeneratorI2cAddressRequest_SignalGeneratorSetPotRequest_SignalGeneratorSetWaveformFrequencyRequest_SignalGeneratorSetWaveformVoltageRequest_SignalGeneratorSetI2cAddressRequest_SignalGeneratorSetHfAmplitudeCorrectionRequest_SignalGeneratorVoutPkPkRequest_SignalGeneratorLoadConfigRequest_SignalGeneratorConfigVersionRequest_SignalGeneratorForwardI2cRequestResponse_SignalGeneratorRamFreeResponse_SignalGeneratorPotResponse_SignalGeneratorWaveformFrequencyResponse_SignalGeneratorWaveformVoltageResponse_SignalGeneratorI2cAddressResponse_SignalGeneratorSetPotResponse_SignalGeneratorSetWaveformFrequencyResponse_SignalGeneratorSetWaveformVoltageResponse_SignalGeneratorSetI2cAddressResponse_SignalGeneratorSetHfAmplitudeCorrectionResponse_SignalGeneratorVoutPkPkResponse_SignalGeneratorLoadConfigResponse_SignalGeneratorConfigVersionResponse_SignalGeneratorCommandRequest_SignalGeneratorCommandResponse)
#endif

#if !defined(PB_FIELD_16BIT) && !defined(PB_FIELD_32BIT)
/* If you get an error here, it means that you need to define PB_FIELD_16BIT
 * compile-time option. You can do that in pb.h or on compiler command line.
 *
 * The reason you need to do this is that some of your messages contain tag
 * numbers or field sizes that are larger than what can fit in the default
 * 8 bit descriptors.
 */
STATIC_ASSERT((pb_membersize(SignalGeneratorCommandRequest, forward_i2c_request) < 256 && pb_membersize(SignalGeneratorCommandRequest, ram_free) < 256 && pb_membersize(SignalGeneratorCommandRequest, pot) < 256 && pb_membersize(SignalGeneratorCommandRequest, waveform_frequency) < 256 && pb_membersize(SignalGeneratorCommandRequest, waveform_voltage) < 256 && pb_membersize(SignalGeneratorCommandRequest, i2c_address) < 256 && pb_membersize(SignalGeneratorCommandRequest, set_pot) < 256 && pb_membersize(SignalGeneratorCommandRequest, set_waveform_frequency) < 256 && pb_membersize(SignalGeneratorCommandRequest, set_waveform_voltage) < 256 && pb_membersize(SignalGeneratorCommandRequest, set_i2c_address) < 256 && pb_membersize(SignalGeneratorCommandRequest, set_hf_amplitude_correction) < 256 && pb_membersize(SignalGeneratorCommandRequest, vout_pk_pk) < 256 && pb_membersize(SignalGeneratorCommandRequest, load_config) < 256 && pb_membersize(SignalGeneratorCommandRequest, config_version) < 256 && pb_membersize(SignalGeneratorCommandResponse, forward_i2c_request) < 256 && pb_membersize(SignalGeneratorCommandResponse, ram_free) < 256 && pb_membersize(SignalGeneratorCommandResponse, pot) < 256 && pb_membersize(SignalGeneratorCommandResponse, waveform_frequency) < 256 && pb_membersize(SignalGeneratorCommandResponse, waveform_voltage) < 256 && pb_membersize(SignalGeneratorCommandResponse, i2c_address) < 256 && pb_membersize(SignalGeneratorCommandResponse, set_pot) < 256 && pb_membersize(SignalGeneratorCommandResponse, set_waveform_frequency) < 256 && pb_membersize(SignalGeneratorCommandResponse, set_waveform_voltage) < 256 && pb_membersize(SignalGeneratorCommandResponse, set_i2c_address) < 256 && pb_membersize(SignalGeneratorCommandResponse, set_hf_amplitude_correction) < 256 && pb_membersize(SignalGeneratorCommandResponse, vout_pk_pk) < 256 && pb_membersize(SignalGeneratorCommandResponse, load_config) < 256 && pb_membersize(SignalGeneratorCommandResponse, config_version) < 256), YOU_MUST_DEFINE_PB_FIELD_16BIT_FOR_MESSAGES_SignalGeneratorForwardI2cRequestRequest_SignalGeneratorRamFreeRequest_SignalGeneratorPotRequest_SignalGeneratorWaveformFrequencyRequest_SignalGeneratorWaveformVoltageRequest_SignalGeneratorI2cAddressRequest_SignalGeneratorSetPotRequest_SignalGeneratorSetWaveformFrequencyRequest_SignalGeneratorSetWaveformVoltageRequest_SignalGeneratorSetI2cAddressRequest_SignalGeneratorSetHfAmplitudeCorrectionRequest_SignalGeneratorVoutPkPkRequest_SignalGeneratorLoadConfigRequest_SignalGeneratorConfigVersionRequest_SignalGeneratorForwardI2cRequestResponse_SignalGeneratorRamFreeResponse_SignalGeneratorPotResponse_SignalGeneratorWaveformFrequencyResponse_SignalGeneratorWaveformVoltageResponse_SignalGeneratorI2cAddressResponse_SignalGeneratorSetPotResponse_SignalGeneratorSetWaveformFrequencyResponse_SignalGeneratorSetWaveformVoltageResponse_SignalGeneratorSetI2cAddressResponse_SignalGeneratorSetHfAmplitudeCorrectionResponse_SignalGeneratorVoutPkPkResponse_SignalGeneratorLoadConfigResponse_SignalGeneratorConfigVersionResponse_SignalGeneratorCommandRequest_SignalGeneratorCommandResponse)
#endif


